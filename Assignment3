import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;


public class HospitalManager {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        Manager m;
        Patient patient = null; //just changed it to null - it does the same thing
        Staff staff = null;
        int choice;


        do { //login
            m = Login.login(scan);

            // Determine user type after login
            if (m.getUserType() == 0) { // Patient
                System.out.println("Logged in as Patient.");
                patient = (Patient) m.getCurrentUser();
            } else if (m.getUserType() == 1) { // Staff
                System.out.println("Logged in as Medical Staff.");
                staff = (Staff) m.getCurrentUser();
            } else {
                System.out.println("Login failed. Please re-enter username and password.");
            }

        } while (m.getUserType() == -1); // Keep asking until there is a successful login

        //this will only be created if it is a staff login
        ArrayList<Patient> patients = new ArrayList<>();
        if (m.getUserType() == 1) {
            patients = m.loadPatients();

            System.out.println("\n--- Loaded Patients ---");
            for (Patient p : patients) {
                System.out.println(p.getId() + " | " + p.getUsername() + " | " +
                        p.getPassword() + " | " + p.getName() + " | " + p.getEmail() +
                        " | " + p.getTreatmentNotes());
            }
        }

        //printing for testing purposes
        if (patient != null) {
            System.out.println("\nCurrent Patient Info:");
            System.out.println(patient.getName());
            System.out.println(patient.getTreatmentNotes());
        }

        showMainMenu(scan, m, patients);

        scan.close();
    }

    //MainMenu
    private static void showMainMenu(Scanner scan, Manager m, ArrayList<Patient> patients) {
        int choice;
        do {
            System.out.println("\nPlease choose from the options what you would like to do");
            System.out.println("1 - View current user's profile");
            System.out.println("2 - Look up a specific patient (staff only)");
            System.out.println("3 - Edit current user");
            System.out.println("4 - Sign out");
            System.out.println("5 - Generate report");
            System.out.print("Enter choice: ");

            while (!scan.hasNextInt()) {
                System.out.print("Invalid input. Enter a number: ");
                scan.next();
            }

            choice = scan.nextInt();
            scan.nextLine();

            switch (choice) {
                case 1:
                    m.printCurrentViewed();
                    break;
                case 2:
                    try {
                        m.lookupPatient();
                    } catch (Exception e) {
                        System.err.println("Access denied: only staff can view patient files.");
                    }
                    break;
                case 3:
                    m.editCurrentPatient();
                    break;
                case 4:
                    System.out.println("Signing out. Goodbye!");
                    break;
                case 5:
                    if (patients == null || patients.isEmpty()) {
                        System.out.println("No patients loaded. Only staff can generate full reports.");
                    } else {
                        Report.generateReport(patients, m.getCurrentUser(), scan);
                    }
                    break;
                default:
                    System.out.println("Invalid choice. Please select a number between 1 and 4.");
            }
        } while (choice != 4);
    }
}

// This should be abstract
abstract class User {
    private final int id;
    private final String username;
    private String password;
    private String name;
    private String email;

    public User(int id, String username, String password, String name, String email) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.name = name;
        this.email = email;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    // Setters
    public void setPassword(String password) {
        this.password = password;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // Used to return a formatted string of user info
    public abstract String toString();
}

class Patient extends User {

    private String treatmentNotes;

    Patient(int id, String username, String password, String name, String email, String treatmentNotes) {
        super(id, username, password, name, email);
        this.treatmentNotes = treatmentNotes;
    }

    String getTreatmentNotes() {
        return treatmentNotes;
    }

    void setTreatmentNotes(String notes) {
        this.treatmentNotes = notes;
    }

    // This overrides the abstract method in User
    @Override
    public String toString() {
        return "Patient ID: " + getId() +
                "\nUsername: " + getUsername() +
                "\nName: " + getName() +
                "\nEmail: " + getEmail() +
                "\nTreatment Notes: " + treatmentNotes;
    }
}

class Staff extends User {

    private String department;

    Staff(int id, String username, String password, String name, String email, String department) {
        super(id, username, password, name, email);
        this.department = department;
    }

    String getDepartment() {
        return department;
    }

    void setDepartment(String department) {
        this.department = department;
    }

    // This overrides the abstract method in User
    @Override
    public String toString() {
        return "Staff ID: " + getId() +
                "\nUsername: " + getUsername() +
                "\nName: " + getName() +
                "\nEmail: " + getEmail() +
                "\nDepartment: " + department;
    }
}

class Login{

    private static final String PATIENT_FILE = "src/patient.csv";
    private static final String STAFF_FILE = "src/medicalstaff.csv";

    static Manager login(Scanner scan){ //I updated the file chacking code to not have to check too many conditionals. I deleted the booleans

        System.out.print("Enter username: ");
        String username = scan.nextLine();
        System.out.print("Enter password: ");
        String password = scan.nextLine();


        /* reads through both files and checks boolean values if there is a match*/

        //reads through patients file
        String file = PATIENT_FILE; // change before submitting
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;

            while ((line = reader.readLine()) != null) {
                String[] info = line.split(",");

                if (info.length >= 6 && username.equals(info[1]) && password.equals(info[2])) {
                    System.out.println("Login successful as Patient!");

                    Patient patient = new Patient(Integer.parseInt(info[0]), info[1], info[2], info[3], info[4], info[5]);

                    // Patient Manager created with the logged-in Patient
                    return new Manager(0, patient, patient);
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading patient file: " + e.getMessage());
        }

        //reads through staff file
        file = STAFF_FILE;

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;

            while ((line = reader.readLine()) != null) {
                String[] info = line.split(",");

                if (info.length >= 6 && username.equals(info[1]) && password.equals(info[2])) {
                    System.out.println("Login successful as Medical Staff!");

                    Staff staff = new Staff(Integer.parseInt(info[0]), info[1], info[2], info[3], info[4], info[5]);

                    // Staff Manager created with the logged-in Staff
                    return new Manager(1, staff, staff);
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading staff file: " + e.getMessage());
        }

        System.out.println("Login failed: invalid username or password.");

        //returned if somehow no user is found and the system doesn't ask the user to re-enter their username and password
        User errorUser = new Patient(0, "error", "error", "error", "error", "error");
        return new Manager(-1, errorUser, errorUser);

    }



    //I removed the Exception Class, You can add it back if you want but code works without it

}

class Manager{
    private int userType; // 0 = Patient, 1 = Staff, -1 = Error
    private User currentUser;
    private User currentViewed;
    private ArrayList<Patient> patients = new ArrayList<>();

    Manager(int userType, User currentUser, User currentViewed) {
        this.userType = userType;
        this.currentUser = currentUser;
        this.currentViewed = currentViewed;
    }

    public int getUserType() {
        return userType;
    }

    public User getCurrentUser() {
        return currentUser;
    }

    public void setCurrentViewed(User user) {
        currentViewed = user;
    }

    public User getCurrentViewed() {
        return currentViewed;
    }

    //create an arraylist of all patients
    public ArrayList<Patient> loadPatients() {
        String file = "src/patient.csv"; // Update path if needed

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] info = line.split(",");
                if (info.length >= 6) {
                    Patient patient = new Patient(
                            Integer.parseInt(info[0]), info[1], info[2], info[3], info[4], info[5]);
                    patients.add(patient);
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading patient file: " + e.getMessage());
        }

        sortPatients(patients);

        // If the current user is a Patient, they can only view themselves
        if (userType == 0) {
            currentViewed = currentUser;
        }

        return patients;
    }

    // Print profile of currentViewed user
    public void printCurrentViewed() {
        System.out.println(currentViewed.toString());
    }

    // Print profile of currentUser
    public void printCurrentUser() {
        System.out.println(currentUser.toString());
    }

    // Lookup a Patient by ID (Staff only)
    public void lookupPatient() throws Exception {
        if (userType == 0) {
            throw new Exception("Error: Only staff can search patient files.");
        }

        Scanner scan = new Scanner(System.in);
        System.out.print("Enter patient ID to search: ");
        int id = scan.nextInt();

        Patient found = binarySearch(id);

        if (found != null) {
            setCurrentViewed(found);
            System.out.println("Patient found:");
            System.out.println(found.toString());
        } else {
            throw new Exception("Patient with ID " + id + " not found.");
        }
    }

    // Edit the currently viewed patient if allowed
    public void editCurrentPatient() {
        if (!(currentViewed instanceof Patient)) {
            System.out.println("Currently viewed user is not a patient.");
            return;
        }

        // Prevent Patients from editing other Patients
        if (userType == 0 && !currentUser.equals(currentViewed)) {
            System.out.println("Patients can only edit their own information.");
            return;
        }

        Scanner scan = new Scanner(System.in);
        Patient patient = (Patient) currentViewed;

        System.out.println("Which attribute would you like to edit?");
        System.out.println("1 - Name");
        System.out.println("2 - Email");
        System.out.println("3 - Password");
        System.out.println("4 - Treatment Notes");
        System.out.print("Enter your choice: ");

        int choice = scan.nextInt();
        scan.nextLine(); // consume newline

        switch (choice) {
            case 1:
                System.out.print("Enter new name: ");
                patient.setName(scan.nextLine());
                break;
            case 2:
                System.out.print("Enter new email: ");
                patient.setEmail(scan.nextLine());
                break;
            case 3:
                System.out.print("Enter new password: ");
                patient.setPassword(scan.nextLine());
                break;
            case 4:
                System.out.print("Enter new treatment notes: ");
                patient.setTreatmentNotes(scan.nextLine());
                break;
            default:
                System.out.println("Invalid choice.");
                return;
        }

        savePatientsToFile();
        System.out.println("Patient information updated successfully.");
    }

    //sort Patients using selection sort by ID
    private ArrayList<Patient> sortPatients(ArrayList<Patient> patients) {
        for (int i = 0; i < patients.size() - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < patients.size(); j++) {
                if (patients.get(j).getId() < patients.get(minIndex).getId()) {
                    minIndex = j;
                }
            }

            // Swap
            if (minIndex != i) {
                Patient temp = patients.get(i);
                patients.set(i, patients.get(minIndex));
                patients.set(minIndex, temp);
            }
        }
        return patients;
    }


    // Binary search for a Patient by ID
    private Patient binarySearch(int id) {
        int left = 0;
        int right = patients.size() - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int midId = patients.get(mid).getId();

            if (midId == id) {
                return patients.get(mid);
            } else if (midId < id) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return null; // Not found
    }

    // Save patients list back to the file
    private void savePatientsToFile() {
        String file = "src/patient.csv"; // Update path if needed

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            for (Patient p : patients) {
                writer.write(p.getId() + "," + p.getUsername() + "," + p.getPassword() + "," +
                        p.getName() + "," + p.getEmail() + "," + p.getTreatmentNotes());
                writer.newLine();
            }
        } catch (IOException e) {
            System.err.println("Error saving to patient file: " + e.getMessage());
        }
    }

}

class Report {

    public static void generateReport(ArrayList<Patient> patients, User currentUser, Scanner scan) {
        System.out.println("\n--- Report Generator ---");
        System.out.println("Choose a report to generate:");
        System.out.println("1 - List of Patients (sorted by ID)");
        System.out.println("2 - List of Patients (sorted by Name)");
        System.out.println("3 - List of all emails (alphabetical)");
        System.out.println("4 - Current user information");
        System.out.print("Enter your choice: ");

        int choice = scan.nextInt();
        scan.nextLine(); // for the newline

        System.out.print("Enter the filename to save the report (e.g. report.txt): ");
        String filename = scan.nextLine();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            switch (choice) {
                case 1:
                    // Sort by ID
                    ArrayList<Patient> sortedById = new ArrayList<>(patients);
                    selectionSortById(sortedById);
                    for (Patient p : sortedById) {
                        writer.write(p.getId() + " | " + p.getName() + " | " + p.getEmail());
                        writer.newLine();
                    }
                    break;

                case 2:
                    // Sort by name
                    ArrayList<Patient> sortedByName = new ArrayList<>(patients);
                    selectionSortByName(sortedByName);
                    for (Patient p : sortedByName) {
                        writer.write(p.getId() + " | " + p.getName() + " | " + p.getEmail());
                        writer.newLine();
                    }
                    break;

                case 3:
                    // Sort emails alphabetically
                    ArrayList<String> emails = new ArrayList<>();
                    for (Patient p : patients) {
                        emails.add(p.getEmail());
                    }
                    selectionSortStrings(emails);
                    for (String email : emails) {
                        writer.write(email);
                        writer.newLine();
                    }
                    break;

                case 4:
                    // Print current user info
                    writer.write(currentUser.toString());
                    break;

                default:
                    System.out.println("Invalid choice. No report generated.");
                    return;
            }

            System.out.println("Report successfully saved to " + filename);
        } catch (IOException e) {
            System.err.println("Error writing report: " + e.getMessage());
        }
    }

    // Reuse the sorting style for ID
    private static void selectionSortById(ArrayList<Patient> list) {
        for (int i = 0; i < list.size() - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < list.size(); j++) {
                if (list.get(j).getId() < list.get(minIndex).getId()) {
                    minIndex = j;
                }
            }
            Patient temp = list.get(i);
            list.set(i, list.get(minIndex));
            list.set(minIndex, temp);
        }
    }

    // Sort by name
    private static void selectionSortByName(ArrayList<Patient> list) {
        for (int i = 0; i < list.size() - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < list.size(); j++) {
                if (list.get(j).getName().compareToIgnoreCase(list.get(minIndex).getName()) < 0) {
                    minIndex = j;
                }
            }
            Patient temp = list.get(i);
            list.set(i, list.get(minIndex));
            list.set(minIndex, temp);
        }
    }

    // Sort strings (emails)
    private static void selectionSortStrings(ArrayList<String> list) {
        for (int i = 0; i < list.size() - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < list.size(); j++) {
                if (list.get(j).compareToIgnoreCase(list.get(minIndex)) < 0) {
                    minIndex = j;
                }
            }
            String temp = list.get(i);
            list.set(i, list.get(minIndex));
            list.set(minIndex, temp);
        }
    }
}
