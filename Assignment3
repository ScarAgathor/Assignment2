import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.ArrayList;



public class Assignment3 {

	public static void main(String[] args) {
		
		Manager m;
		Patient patient = new Patient(000, "null", "null", "null", "null","null");
		Staff staff = new Staff (000, "null","null","null","null","null");
		int choice;
		
		
		do {
		m = Login.login();
		//checks if the logged in user is a patient or staff
		if(m.getUserType() == 0) {
			System.out.println("patient");
			patient = (Patient)m.getCurrentUser();
		}
		
		if(m.getUserType() == 1) {
			System.out.println("staff");
			staff = (Staff)m.getCurrentUser();
		}
		
		if(m.getUserType() == -1){
			System.out.println("No user found, please re-enter username and password");
			
		}
		
		}while(m.getUserType() == -1);
		
		//move this so its only created if staff login
		ArrayList<Patient> patients = m.loadPatients();
		
		//printing for testing purposes
		for(int i = 0; i < patients.size();i++) {
		System.out.println(patients.get(i).getid() + " " + patients.get(i).getUsername() + " " + patients.get(i).getPassword() + " " + patients.get(i).getName() + " " + patients.get(i).getEmail() + " " + patients.get(i).getTreatmentNotes());
		}
		
		System.out.println(patient.getTreatmentNotes());
		System.out.println(patient.getName());
		
		Scanner scan = new Scanner(System.in);
		
		
		do{
			System.out.println("Please choose from the options what you would like to do");
		
		System.out.println("1 - view current users profile");
		System.out.println("2 - lookup specific user");
		System.out.println("3 - edit current user");
		System.out.println("4 - sign out");
		choice = scan.nextInt();
		
		switch (choice) {
		case 1:
			m.printCurrentViewed();
			break;
		case 2:
			try{
				m.lookupPatient();
			}
			catch(Exception e) {
				System.err.println("only staff can view patient files, please choose another option");
			}
			
			break;
		case 3:
			m.editCurrentPatient();
			break;
		case 4:
			System.out.println("goodbye");
			break;
		default:
			System.out.println("please choose one of the listed options");
			System.out.println("1 - view current users profile");
			System.out.println("2 - lookup specific user");
			System.out.println("3 - edit current user");
			System.out.println("4 - sign out");
			choice = scan.nextInt();
			
		}
		
		}while(choice != 4); 
	}
	
}

abstract class User{ //idk if this needs to be abstract or not
	
	Scanner scan = new Scanner(System.in);
	
	private int id;
	private String username;
	private String password;
	private String name;
	private String email;
	
	User(int id, String username, String password, String name, String email){
		this.id = id;
		this.username = username;
		this.password = password;
		this.name = name;
		this.email = email;
	}
	int getid() {
		return id;
	}
	String getUsername() {
		return username;
	}
	String getPassword() {
		return password;
	}
	String getName() {
		return name;
	}
	
	void setName() {
		System.out.println("enter name");
		name = scan.nextLine();
	}
	
	String getEmail() {
		return email;
	}
	
}

 class Patient extends User{
	
	private String treatment_notes;
	
	Patient(int id, String username, String password, String name, String email, String treatment_notes){
		super(id, username, password, name, email);
		this.treatment_notes = treatment_notes;	
	}
	String getTreatmentNotes() {
		return treatment_notes;
	}
}

 class Staff extends User{
	private String department;

	Staff(int id, String username, String password, String name, String email, String department){
		super(id, username, password, name, email);
		this.department = department;
	}
	
	String getDepartment() {
		return department;
	}
}

class Manager{
	
	private int userType;
	private User currentUser;
	private User currentViewed;
	ArrayList<Patient> patients = new ArrayList<>();
	
	Manager(int userType, User currentUser, User currentViewed) {
		
		this.userType = userType;
		this.currentUser = currentUser;
		this.currentViewed = currentViewed;
		
	}
	
	int getUserType() {
		return userType;
	}
	
	ArrayList<Patient> loadPatients() {
		//creates array list of all patients
		String file = "patient.csv"; 

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                
            	String[] info = line.split(",");
            	Patient patient = new Patient(Integer.parseInt(info[0]), info[1], info[2], info[3], info[4], info[5]);
            	
            	patients.add(patient);
            }
        }catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
        
        sortPatients(patients);
        
        
	return patients;	
	}
	
	User getCurrentUser() {
		return currentUser;
	}
	void setCurrentViewed(User user) {
		currentViewed = user;
	}
	User getCurrentViewed() {
		return currentViewed;
	}
	int getCurrentViewedType() {
		
		int currentViewedType = -1;
		
		
		if(getCurrentViewed() instanceof Patient) {
			currentViewedType = 0;
		}
		if(getCurrentViewed() instanceof Staff) {
			currentViewedType = 1;
		}
		
		System.out.println(currentViewedType);
		
		return currentViewedType;
	}
	
	void printCurrentViewed(){
		
		int userType = getCurrentViewedType();
		
		if(userType == 0) {
		
			Patient user = (Patient)getCurrentViewed();
		
			System.out.println(user.getid() + " " + user.getName() + " " + user.getEmail() + " " + user.getTreatmentNotes());
		}
		
		if(userType == 1) {
			
			Staff user = (Staff)getCurrentViewed();
			
			System.out.println(user.getid() + " " + user.getName() + " " + user.getEmail() + " " + user.getDepartment());
		}

	}
	
	void printCurrentUser() {
		int userType = getUserType();
		
		if(userType == 0) {
		
			Patient user = (Patient)getCurrentUser();
		
			System.out.println(user.getid() + " " + user.getName() + " " + user.getEmail() + " " + user.getTreatmentNotes());
		}
		
		if(userType == 1) {
			
			Staff user = (Staff)getCurrentUser();
			
			System.out.println(user.getid() + " " + user.getName() + " " + user.getEmail() + " " + user.getDepartment());
		}
	}
	
	void lookupPatient() throws Exception{
	
		int id = 0;
		
		if(getUserType() == 0) {
			Exception e = new Exception("Error, only staff can search patient files");
			throw e;
		}
		
		else {
			System.out.println("please enter user id: ");
			Scanner scan = new Scanner(System.in);
			id = scan.nextInt();
			
		}
		
		//for testing only, needs to be binary search
		for(int i = 0; i < patients.size(); i++) {
			if(patients.get(i).getid() == id) {
				setCurrentViewed(patients.get(i));
				break;
			}
			//create an exception if no id is found
		}
		

		System.out.println(getCurrentViewed());
		
		
		
		
		
	}
	
	void editCurrentPatient() {
		
	}
	
	ArrayList<Patient> sortPatients(ArrayList<Patient> patients){
		//This part is broken af, supposed to sort patients by their id number from lowest to highest
		Patient patient = patients.get(0);
		int lowest = patient.getid();
		Patient lowestPatient = patients.get(1);
		Patient temp = patients.get(0);
		int current = 0;
		Patient temp2 = patients.get(0);
		
		for (int i = 0; i < patients.size(); i++) {
			patient = patients.get(i);
			System.out.print(patient.getName() + " ");
			current = patient.getid();
			System.out.println(current);
			
			for(int j = i+1; j< patients.size(); j++) {
				
				temp = patients.get(j);
				System.out.println("temp - " + temp.getid());
				
				if(temp.getid() < lowest) {
				
					lowest = patient.getid();
					temp2 = patient;
					lowestPatient = temp;
					
					
					patients.set(i, temp);
					patients.set(j, temp2);
					
					
					
				}
				
			}
		}
		
		
		return patients;
	}
	
}



class Login{
	
	static Manager login(){
		Scanner scan = new Scanner(System.in);
		
		
        System.out.println("Enter username: ");
        String username = scan.nextLine();
        System.out.println("Enter password: ");
        String password = scan.nextLine();
        boolean passwordMatch = false;
        boolean usernameMatch = false;

        /* reads through both files and checks boolean values if there is a match, if both values are true
         * at the same time, then the user is logged in and a new patient or staff object is created and passed
         * through a new manager object to the driver class (Assignment3)*/
        
        //reads through patients file
        String file = "patient.csv"; 

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                
            	String[] info = line.split(",");
            	
            	if (username.equals(info[1])) {
                    usernameMatch = true;
                } 
            	else {
                    usernameMatch = false;
                }
            	
            	if(password.equals(info[2])) {
            		passwordMatch = true;
            	}
            	else {
                    passwordMatch = false;
                }
            	
            	if(usernameMatch && passwordMatch) {
            		System.out.println("Successful login");
            		Patient patient = new Patient(Integer.parseInt(info[0]), info[1],info[2],info[3],info[4],info[5]);
            		Manager m = new Manager(0, patient,patient);
            		
            		return m;
            		
            		
            	}
            }
            
            
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
        
        //reads through staff file
        file = "medicalstaff.csv"; 

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                
            	String[] info = line.split(",");
            	
            	if (username.equals(info[1])) {
                    usernameMatch = true;
                } 
            	else {
                    usernameMatch = false;
                }
            	
            	if(password.equals(info[2])) {
            		passwordMatch = true;
            	}
            	else {
                    passwordMatch = false;
                }
            	
            	if(usernameMatch && passwordMatch) {
            		System.out.println("Successful login");
            		Staff staff = new Staff(Integer.parseInt(info[0]), info[1],info[2],info[3],info[4],info[5]);
            		Manager m = new Manager(1, staff,staff);
            		
            		System.out.println(staff instanceof Staff);
            		
            		
            		return m;
            		
            		
            		
            	}
            }
            
            
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
        
        //returned if somehow no user is found and the system doesn't ask the user to re-enter their username and password
        User error = new Patient(000, "error","error","error","error","error");
		Manager m = new Manager(-1, error,error);
		
		return m;
        
	}
	
	
	
	class Exception{
		
		String s;
		
		Exception(String s){
			this.s = s;
		}
	}
	
}


	
